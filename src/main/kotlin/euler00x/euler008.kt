package euler00x

/**
 *
Largest product in a series
Problem 8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

 */

// 1: parse this string, put into bigNum = ArrayList(1000)
// 2: get chunk of n digits, multiply
// 3: iterate over bigNum, get Max

// also note, I learned in the last lesson that the test class name needs to be different from the
// class name here, otherwise kotlin gives an unclear error message.  now suffixing Test to the problem
// name, either I should hide code inside objects or start declaring things private, the euler00x package
// namespace is getting a little gnarly.

object Euler008 {
    val bigNumStr = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
"""

    // ctrl-shift-p (R keycap)
    // Lesson learned here: Originally to go from List<Char> -> List<Int> I was doing .map { it.toInt() }
    // But that isn't what you want, you need to parse the character as a string
    val bigNumList = bigNumStr.toList().filter { it.isDigit() }.map { Integer.parseInt(it.toString()) }

    fun chunkUnchecked(startIndex: Int, length: Int): List<Int> {
        return bigNumList.subList(startIndex, startIndex + length)
    }

    // unchecked throws IndexOutOfBounds, adding the require() throws IllegalArgumentException
    fun chunk(startIndex: Int, length: Int): List<Int> {
        require(startIndex + length <= bigNumList.size )
        return bigNumList.subList(startIndex, startIndex + length).map { it.toInt() }
    }

    fun lastIndexForLength(length: Int) = bigNumList.size - length

    // tricky, glad I double checked by adding the println(), otherwise I wouldn't have realized we needed to use longs
    fun findMaxProductForLength(length: Int): Long {
        var maxProduct = 0L
        val last = Euler008.lastIndexForLength(length)
        for (i in 0..last)  {
            val chunk = Euler008.chunk(i, length)
            val product: Long = chunk.fold(1L) { acc, x -> acc * x.toLong() }
            maxProduct = if (product > maxProduct) {
                println("product=$product chunk=$chunk")
                product
            } else maxProduct
        }
        return maxProduct
    }
}

fun main(args: Array<String>) {
    println("my answer = ${Euler008.findMaxProductForLength(13)}")
}