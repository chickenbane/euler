package euler00x

import java.util.*

// Even Fibonacci numbers
// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fun fib(n: Int): Int {
    if (n < 0) throw IllegalArgumentException("no negatives")
    return when (n) {
        1, 2 -> n
        else -> fib(n - 2) + fib(n - 1)
    }
}

val fourMill = 4000000

fun firstTermGt4m(): Int {
    var n = 1
    while (fib(n) < fourMill) {
        n += 1
    }
    return n
}

fun main1(args: Array<String>) {
    val n = firstTermGt4m()
    println("fib($n)=${fib(n)}")
    // this returns 33 which is 5.7M
}

// should have written this in euler001
fun IntRange.toList(): List<Int> {
    val list = ArrayList<Int>(endInclusive)  // approx size
    for (i in this) list.add(i)
    return list
}

fun main(args: Array<String>) {
    val first32 = (1..32).toList()
    // TODO brute force!
    val first32fib = first32.map { fib(it) }
    val fib32even = first32fib.filter { it % 2 == 0 }
    println("my answer = ${fib32even.sum()}")
}
